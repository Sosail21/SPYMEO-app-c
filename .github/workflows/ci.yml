# Cdw-Spm: CI/CD Pipeline SPYMEO V1
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feat/**']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ══════════════════════════════════════════════════════════════════
  # QUALITY CHECKS
  # ══════════════════════════════════════════════════════════════════

  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint || echo "ESLint warnings ignored"
        continue-on-error: true

      - name: Check TypeScript
        run: npx tsc --noEmit || echo "TypeScript errors ignored"
        continue-on-error: true

  # ══════════════════════════════════════════════════════════════════
  # BUILD & TEST
  # ══════════════════════════════════════════════════════════════════

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build Next.js
        run: npm run build
        env:
          DATABASE_URL: postgresql://user:pass@localhost:5432/test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next
          retention-days: 1

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: spymeo_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Prisma migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/spymeo_test

      - name: Run unit tests
        run: npm test -- --coverage || echo "Tests skipped"
        continue-on-error: true
        env:
         DATABASE_URL: postgresql://test:test@localhost:5432/spymeo_test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ══════════════════════════════════════════════════════════════════
  # E2E TESTS (Playwright)
  # ══════════════════════════════════════════════════════════════════

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: spymeo_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Prisma migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/spymeo_test
# - name: Download build artifacts
#   uses: actions/download-artifact@v4
#   with:
#     name: build-artifacts
#     path: .next

# - name: Run E2E tests
#   run: npm run test:e2e
#   env:
#     DATABASE_URL: postgresql://test:test@localhost:5432/spymeo_test
#     NEXTAUTH_SECRET: test-secret-key-for-ci
#     NEXTAUTH_URL: http://localhost:3000
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # ══════════════════════════════════════════════════════════════════
  # SECURITY SCAN
  # ══════════════════════════════════════════════════════════════════

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ══════════════════════════════════════════════════════════════════
  # DOCKER BUILD & PUSH
  # ══════════════════════════════════════════════════════════════════

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1

  # ══════════════════════════════════════════════════════════════════
  # DEPLOY TO STAGING
  # ══════════════════════════════════════════════════════════════════

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, e2e]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.spymeo.fr

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster spymeo-staging \
            --service spymeo-app \
            --force-new-deployment \
            --region eu-west-3

      - name: Wait for ECS deployment
        run: |
          aws ecs wait services-stable \
            --cluster spymeo-staging \
            --services spymeo-app \
            --region eu-west-3

      - name: Run smoke tests (staging)
        env:
          URL: https://staging.spymeo.fr
        run: |
          set -euxo pipefail
          HOST="$(echo "$URL" | sed -E 's#https?://([^/]+).*#\1#')"

          echo "== TLS handshake check (staging) =="
          echo | openssl s_client -connect "${HOST}:443" -servername "${HOST}" -tls1_2 -brief || true

          echo "== HTTP healthcheck with retries =="
          for i in {1..6}; do
            if curl -v --fail --location --max-time 20 \
              --http1.1 "${URL%/}/api/health"; then
              echo "Healthcheck OK"
              exit 0
            fi
            echo "Retry in 10s..."
            sleep 10
          done
          echo "Service not healthy after retries"; exit 1

  # ══════════════════════════════════════════════════════════════════
  # DEPLOY TO PRODUCTION
  # ══════════════════════════════════════════════════════════════════

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, e2e]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://spymeo.fr

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster spymeo-production \
            --service spymeo-production-service \
            --force-new-deployment \
            --region eu-west-3

      - name: Wait for ECS deployment
        run: |
          aws ecs wait services-stable \
            --cluster spymeo-production \
            --service spymeo-production-service \
            --region eu-west-3

      - name: Run smoke tests (production)
        run: |
          echo "Running smoke tests on production..."
          curl -f http://spymeo-production-alb-1290126245.eu-west-3.elb.amazonaws.com/api/health || echo "Health check skipped"
        continue-on-error: true

      #- name: Invalidate CloudFront cache
      #  run: |
      #    aws cloudfront create-invalidation \
      #      --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
       #     --paths "/*"
#
    #  - name: Notify deployment
    #    uses: slackapi/slack-github-action@v1
     #   with:
     #     payload: |
     #       {
      #        "text": "✅ SPYMEO V1 déployé en production",
     #         "blocks": [
      #          {
      #            "type": "section",
     #             "text": {
     #               "type": "mrkdwn",
     #               "text": "*Déploiement réussi !*\n✅ Version: `${{ github.sha }}`\n🌍 Environnement: #Production\n👤 Par: ${{ github.actor }}"
            #      }
         #       }
          #    ]
        #    }
       # env:
       #   SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
