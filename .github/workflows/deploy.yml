name: Deploy to ECS

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: spymeo-app-c
  ECS_SERVICE: spymeo-production-service
  ECS_CLUSTER: spymeo-production
  CONTAINER_NAME: spymeo-app
  GHCR_IMAGE: ghcr.io/sosail21/spymeo-app-c

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.GHCR_IMAGE }}:latest
            ${{ env.GHCR_IMAGE }}:main
            ${{ env.GHCR_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

     # - name: Run Trivy vulnerability scanner
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    image-ref: ${{ env.GHCR_IMAGE }}:${{ github.sha }}
       #   format: 'sarif'
      #    output: 'trivy-results.sarif'
      #  continue-on-error: true

     # - name: Upload Trivy results to GitHub Security tab
     #   uses: github/codeql-action/upload-sarif@v3
     #   with:
     #     sarif_file: 'trivy-results.sarif'
     #   continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Force ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}